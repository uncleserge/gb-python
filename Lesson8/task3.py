# Task 3
#
# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами
# выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
# Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
# ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class MyExceptionError(Exception):
    def __init__(self, item, message='My exception'):
        self.__item = item
        self.__message = message
        super().__init__(message)

    def __str__(self):
        return f'<{self.__item}> {self.__message}'


def check_value(item):
    if item.isdigit():
        return int(item)
    elif item.replace('.', '').isdigit():
        return float(item)
    else:
        raise MyExceptionError(item, "не является числом")


data_list = [1]
non_stop = True

while non_stop:

    data = input("Введите значения, разделённые пробелом. Для остановки введите stop. >>").split()
    print(data)
    for el in data:
        if el.lower() == 'stop':
            non_stop = False
            break
        try:
            data_list.append(check_value(el))
        except MyExceptionError as err:
            print(err)

print(data_list)

